

TransferFunCWT <- function(data, HF = 0.4, LF = 0.15, VLF = 0.04,
  chosen.dj = 1/20, dt = 0.25, demean = TRUE){
                  if(demean){
                     for(n in 2:ncol(data)){
                         data[,n] <- data[,n] - mean(data[,n])
                     }
                  }
                  time <- data[,1]
                  WT.x <- biwavelet::wt(cbind(time, data[,3]), dj = chosen.dj,
                     s0 = 1/(HF + 0.1), max.scale = 1/(VLF - 0.01))
                  WT.y <- biwavelet::wt(cbind(time, data[,2]), dj = chosen.dj,
                     s0 = 1/(HF + 0.1), max.scale = 1/(VLF - 0.01))
                  s.inv <- 1/t(WT.x$scale)
                  s.inv <- matrix(rep(s.inv, ncol(WT.x$wave)),
                      nrow = nrow(WT.x$wave))
                  #XWT <- (WT.x$wave * Conj(WT.y$wave))
                  XWT <- (Conj(WT.x$wave) * WT.y$wave)
                  sWT.x <- biwavelet::smooth.wavelet(s.inv * (abs(WT.x$wave)^2), 
                     WT.x$dt, chosen.dj, WT.x$scale) 
                  sWT.y <- biwavelet::smooth.wavelet(s.inv * (abs(WT.y$wave)^2), WT.x$dt, 
                     chosen.dj, WT.x$scale) 
                  sXWT = biwavelet::smooth.wavelet(s.inv * XWT, WT.x$dt, 
                     chosen.dj, WT.x$scale) 
                  TransferFun <- sXWT / sWT.x
                  Coherence <- abs(sXWT)^2 / (sWT.x * sWT.y)
                  Objects <- list()
                  return(list(TransferFun = TransferFun, Coherence = Coherence,
                      Freqs = 1/WT.x$period, Cone = WT.x$coi, Time = data[,1],
                         HF = HF, LF = LF, VLF = VLF, type = "TFun_cwt"))
}


